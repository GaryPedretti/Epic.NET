<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which
         assemblies to include from solution and project documentation
         sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4064220d-1c73-4463-b6f5-29869ddec88b}</ProjectGuid>
    <SHFBSchemaVersion>1.9.3.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual
         Studio adds them anyway -->
    <AssemblyName>Documentation</AssemblyName>
    <RootNamespace>Documentation</RootNamespace>
    <Name>Documentation</Name>
    <!-- SHFB properties -->
    <OutputPath>..\build\doc\</OutputPath>
    <HtmlHelpName>Documentation</HtmlHelpName>
    <Language>en-US</Language>
    <NamingMethod>MemberName</NamingMethod>
    <Preliminary>True</Preliminary>
    <PresentationStyle>vs2005</PresentationStyle>
    <SyntaxFilters>CSharp</SyntaxFilters>
    <HelpFileFormat>Website</HelpFileFormat>
    <DisableCodeBlockComponent>True</DisableCodeBlockComponent>
    <CopyrightText>Copyright %28c%29 2010-2012 Giacomo Tesio</CopyrightText>
    <CopyrightHref>mailto:giacomo%40tesio.it</CopyrightHref>
    <HelpTitle>Epic.NET</HelpTitle>
    <VisibleItems>Attributes, InheritedMembers, InheritedFrameworkMembers, Protected, ProtectedInternalAsProtected, SealedProtected</VisibleItems>
    <ProjectSummary>Epic is an open source framework designed to keep your domain model implementation fully focused on the enterprise business targeted by the application, with an infrastructure ignorant fashion.&amp;lt%3bbr/&amp;gt%3b&amp;lt%3bbr/&amp;gt%3b
It achieves a new kind of dependency inversion, where the domain model settles at the core: everything will depend on it %28even the infrastructure%29 while the domain model itself will be clean, mantainable and ready for reuse.&amp;lt%3bbr/&amp;gt%3b&amp;lt%3bbr/&amp;gt%3b
Such design comes from the consideration that an enterprise application evolves over different, indipendent axes:
&amp;lt%3bul&amp;gt%3b
&amp;lt%3bli&amp;gt%3bthe tecnology changes with the skills of the developers involved %28and too often the marketing claims of few vendors%29&amp;lt%3b/li&amp;gt%3b
&amp;lt%3bli&amp;gt%3bthe customers&amp;#39%3b requirements change as their business evolves&amp;lt%3b/li&amp;gt%3b
&amp;lt%3bli&amp;gt%3bthe user interface evolves through the users feedback %28but always depends on the handled business%29&amp;lt%3b/li&amp;gt%3b
&amp;lt%3bli&amp;gt%3bthe storage tecniques change with the load requirements and the usage patterns&amp;lt%3b/li&amp;gt%3b
&amp;lt%3bli&amp;gt%3bthe deploy depends on marketing strategies&amp;lt%3b/li&amp;gt%3b
&amp;lt%3b/ul&amp;gt%3b
Complex requirements lead to complex domain models. To keep such models clean and maintainable we have to decouple them from unrelated aspects such as presentation, logging, persistence and so on.&amp;lt%3bbr/&amp;gt%3b&amp;lt%3bbr/&amp;gt%3b
Epic makes the scene.</ProjectSummary>
    <ComponentConfigurations>
      <ComponentConfig id="API Token Resolution" enabled="True" xmlns="">
        <component id="API Token Resolution" type="Microsoft.Ddue.Tools.SharedContentComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">

			{@TokenFiles}
			<replace elements="/*//token" item="string(.)" />
</component>
      </ComponentConfig>
<ComponentConfig id="Code Block Component" enabled="True" xmlns=""><component id="Code Block Component" type="SandcastleBuilder.Components.CodeBlockComponent" assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
  <basePath value="{@HtmlEncProjectFolder}" />
  <languageFilter value="true" />
  <allowMissingSource value="false" />
  <removeRegionMarkers value="true" />
  <colorizer syntaxFile="{@SHFBFolder}Colorizer\highlight.xml" styleFile="{@SHFBFolder}Colorizer\highlight.xsl" copyImageUrl="../icons/CopyCode.gif" language="cs" tabSize="4" numberLines="true" outlining="false" keepSeeTags="false" defaultTitle="true" />
</component></ComponentConfig>
<ComponentConfig id="IntelliSense Component" enabled="True" xmlns=""><component id="IntelliSense Component" type="SandcastleBuilder.Components.IntelliSenseComponent" assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
<!-- Output options (optional)
					 Attributes:
							Include Namespaces (false by default)
							Namespaces filename ("Namespaces" if not specified or empty)
							Directory (current folder if not specified or empty) -->
<output includeNamespaces="false" namespacesFile="Namespaces" folder="{@OutputFolder}" />
</component></ComponentConfig></ComponentConfigurations>
    <PlugInConfigurations />
    <DocumentationSources>
      <DocumentationSource sourceFile="..\Code\Epic.Core\Epic.Core.csproj" />
<DocumentationSource sourceFile="..\Code\Epic.Prelude\Epic.Prelude.csproj" />
<DocumentationSource sourceFile="..\Code\Epic.Query\Epic.Query.csproj" />
<DocumentationSource sourceFile="..\Code\Epic.Query.Linq\Epic.Query.Linq.csproj" />
<DocumentationSource sourceFile="..\Code\Epic.Query.Object\Epic.Query.Object.csproj" /></DocumentationSources>
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in
       order for Visual Studio to perform the build.  The others are optional
       common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
</Project>