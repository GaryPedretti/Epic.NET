[[shared_identifiers]]
Shared Identifiers
------------------
I am Giacomo Tesio. "Giacomo Tesio" represents a convention for calling me.

It's just a string, an expression that human beings can tell, write or type.

There are a lot of identifiers pointing to me: tax code, vat code and even 
babblings like "papo" footnote:[Something like "daddee", in italian.] as 
my lovely doughter used to call me when she was six month old.

As you know, identifiers are key concepts in domain driven design.

Most of newcomers thinks that identifiers are just used to identify.

They are not. They are first class citizen in the ubiquitous language.

All people that develop, use or maintain a domain model *must share* the 
identifiers or the language loose its ubiquitousness.

No matter how fast are integer indices over a database, to identify a security 
on a international software you *must* use its ISIN. 
footnote:[ISINs are slowly being introduced worldwide. At present, 
many countries have adopted ISINs as a secondary measure of identifying 
securities, but as yet only some of those countries have moved to using ISINs 
as their primary means of identifying securities.]
To identify a web resource you *must* use its http URI.

WARNING: This is the general rule. But do not forget to adapt the rule to the 
context! To identify my home computers, my doughter say "the big one", 
"the old one", "the one I could break" and in such context these identifiers 
are far better than their own network addresses!

You can share what you have
~~~~~~~~~~~~~~~~~~~~~~~~~~~
To share something you need to own it.

Owning an identifier means to be able to express it in the domain model.
Thus you should always model identifiers with dedicated classes.

Identifiers are contracts by definition, so they do not need to be interfaces.

Moreover they are immutable since mutability would damage their use.

This makes strings and integers a sweet temptation to avoid. The reason is 
simple you can't sum two identifiers and most of times you can't get an 
identifier from another.

So you have to design entities' identifiers as custom value objects.
When they follow business rules (like ISBN-13) you should put them in their 
code. Moreover you should make them sealed to avoid dirty temptations that
could lead you to a bloodbath.

[TIP]
=====================================================================
ISBN is an interesting identifier: for a bookshop ISBNs are the main 
candidates to identify books, but what about a library?
Library's employees distinguish between different copies of the same book, so 
that an ISBN is not enough. Nevertheless, public catalogs use 
ISBN to allow library's users to find what they need.

So what?

This is a simple case of identifiers shared in different contexts:
both users and employees understand ISBNs when looking for a copy of a book, 
but when an employee lends you a book, he logs the individual copy's location
through its registration code.

In this situation we would have two classes for identify books: ISBN for the 
LibraryUser role and RegistrationCode for the LibraryEmployee one.
=====================================================================

Cheap placeholders
~~~~~~~~~~~~~~~~~~
Think about a web URI.

You can type it, you can write it down, you can put it in your wallet and so on.
Carrying an URI is far easier than carrying the resource!

Otherwise, getting the resource is cheap as far as you have access to the web 
(and you are allowed to get it).

The web works like a cheap repository. 

URIs are just specialized identifiers, but the same is true 
to any other kind of identifier: whenever you have access to a repository, you 
can always get entities in return for identifiers.

This mean that you can replace an entity with its identifier.

If you model the user of a library, for example, such LibraryUser do not need 
to keep a reference to all the lent books: their ReferenceCode are enough.

It might seem a bit "relational", but it's not: LibraryUser's methods 
like Lend() or Return() should not accept identifiers, just books. 
Only the ReadingBooks property should be an enumerable of ReferenceCodes.

Decoupling entities
~~~~~~~~~~~~~~~~~~~
Coming soon.

Decoupling contexts
~~~~~~~~~~~~~~~~~~~
Coming soon.


