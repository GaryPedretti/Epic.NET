[[solid_principles]]
SOLID Principles
----------------
We all know the principles introduced by Robert C. Martin in the early 2000s.
They are milestones in the evolution of OOP and they are still valid ten years 
later.

However, when applied to a domain model, they need some small adjustments 
based upon the unfortunate experiences of a few experienced developers facing 
to their first domain model.

CAUTION: We do not pretend to talk out each principle, as Martin's books are a 
must read for developers using Epic. 

We heartily recommend the principles described, as they will increase the 
stability of your models, improving their quality even from a design point 
of view.

Single Responsibility
~~~~~~~~~~~~~~~~~~~~~
["quote", "Robert C. Martin", "Agile Software Development, Principles, Patterns, and Practices (2002)"]
A class should have only *one* reason to change.

In the context of the SRP, Martin defines a responsibility to be "a reason for 
change". He states that if you can think of more than one motive for changing a
class, than that class has more than one responsibility.
However, whenever no change actually occur, separating responsibility could 
smell of needless complexity.

In a domain model rightly partitioned in contexts, there are only tree 
legitimate reasons for change:

- business evolution,
- deeper insight,
- bug fixes.

Since all profitable enterprises evolve, the models that capture their 
processes will need to be updated. This kind of changes can not be anticipated 
and they affect almost everything in an application built with Epic.  +
The good news is that the customer acknowledges about the change he is 
asking for and he is willing to pay. footnote:[How will be explained into 
the third part of the book, in such a case you should consider whether to 
write a new bounded context or modify the current one. 
The number of production environments running the current code could be a 
persuasive argument in one sense or another.]

Whenever you get a deeper insight into a domain, you are in a economical 
dilemma: should we change the code or not? And why? Just to clarify the 
modelâ€™s expression through the code?  +
Finding the right answer to these questions is hard and should be done 
carefully. You should consider factors like the complexity of the new model and
of the previous one, the time available, the long term cost of postponing the 
refactoring (a cost always undervalued, that slowly increases each day), 
the cost of all workarounds that you'll have to implement without the new
model and so on.  +
My own, personal, opinion is that most of times the refactoring should be 
planned with the customer. If it's not a trivial task, you should never hide to 
the customer the problems emerged with the previous model.

Finally, as there's no software without bug, all fixes will force you to modify
the model. This could seem quite obvious, but it has a nasty side effect: you 
could introduce new subtle untracked bugs. 
Unit tests' code coverage could reduce the risks but can not eliminate them.
footnote:[I think that the domain model implementation should take pride in a
full code coverage (100%). This seems expensive at first, when you are at 97%
and you can't find a way to test those dirty three lines. 
However, a full code coverage will force you to read your code over and over 
again, drastically improving the quality of the implementation itself.
The ROI of such kind of revision is often bigger than that of the tests 
themselves as safety net.] 
Fortunatly, since no bug should relate to contracts (or it will lead you to a 
far more expensive refactoring toward a deeper insight), all the code depending
on the broken component don't even need to be recompiled. Indeed, one of the
reason that led us to introduce a thin layer of pure interfaces around the 
domain model implementation was the evaluation of the deploy's costs of bug 
fixes. With such interfaces, we can minimize the number of layers affected by a
bug in the domain, reducing the system stops and the loss for our customer.

Open-Closed
~~~~~~~~~~~
["quote", "Robert C. Martin", "Agile Software Development, Principles, Patterns, and Practices (2002)"]
Software entities (classes, modules, functions, etc.) should be open for 
extension, but closed for modification.

The golden unachievable ideal of OCP would allow to change a system behaviour
by adding new code, not by changing old code that already works.  +
This would lead to an easy versioning, as each new version would be backward 
compatible.

Well defined *contexts* are the first tool for approaching that ideal. Indeed
as far as you define small contexts, you reduce the probability of changes in
any single one. Moreover, if the business rules are the only force that drives 
your design, the code will be as stable as that rules.

For example, if your software handles vineyards and your customer buys a new 
wheat field, you can sell him a new context instead of adding new classes to 
the previous one. 

To further keep the model closed to modification you could take cheap design 
decisions that do not smell of needless complexity. For example, since our 
models run in different technological environments (ASP.NET pages, data loaders, 
web services and WinForm applications) we choosed to mark all the classes 
belonging to the domain model with the +SerializableAttribute+. Moreover,
when we got the first customer that required realtime synchronization 
between different applications running the same domain, we designed the 
Single Mutable State pattern (that we adopted massively from then on).

TIP: Feel free to violate the OCP of modules only when the business evolves and 
you can't simply add a new context.

The interface layer that surrounds the model allows a limited flexibility to 
the code but whenever either the business changes or you get a deeper insight 
of the context you will have to break the OCP, with a new version of the code.

Template methods are useful when the modelers already know that a domain entity 
will have some specializations that do not violate the LSP. However you should 
never leave a class unsealed just to keep an open door behind.

The good news is that technological changes will not affect the model itself:
you can replace Epic without any model's recompilation. 

Liskov Substitution
~~~~~~~~~~~~~~~~~~~
["quote", "Robert C. Martin", "Agile Software Development, Principles, Patterns, and Practices (2002)"]
Subtypes must be substitutable for their base types.

We've said that no modeler should introduce in the model abstractions ignored by
the domain experts, as this always lead to rigidity smells and long term bugs.

We value the LSP a lot, since we had some very expensive experiences with its 
violations. The principle heavily reduces the applicability of inheritance.

To apply this principle to the domain-driven design, we need that no entity 
is abstracted beyond its own identifier: all the entities in a hierarchy
must share the same kind of identifiers. For example, all type of securities 
can be identified by their ISIN (or their RIC, or so). 

Dependency Inversion
~~~~~~~~~~~~~~~~~~~~
["quote", "Robert C. Martin", "Agile Software Development, Principles, Patterns, and Practices (2002)"]
_______________________________________________________________
a. High-level modules should not depend on low-level modules. 
   Both should depend on abstractions.
b. Abstractions should not depend on details. 
   Details should depend on abstractions.
_______________________________________________________________

Interface Segregation
~~~~~~~~~~~~~~~~~~~~~
["quote", "Robert C. Martin", "Agile Software Development, Principles, Patterns, and Practices (2002)"]
Clients should not be forced to depend on methods that they do not use.
